#ifndef MARCCDREADER_H
#define MARCCDREADER_H


///////////////////////////////////////////////////////////
// YAT::TASK 
///////////////////////////////////////////////////////////
#include <yat/threading/Task.h>
#include <DiffractionImage.h>			//- to read back img data

#define kLO_WATER_MARK      128
#define kHI_WATER_MARK      512

#define kPOST_MSG_TMO       2

#define kTASK_PERIODIC_TIMEOUT_MS   1000
const size_t  MARCCD_START_MSG     =   (yat::FIRST_USER_MSG + 300);
const size_t  MARCCD_STOP_MSG      =   (yat::FIRST_USER_MSG + 301);
const size_t  MARCCD_RESET_MSG     =   (yat::FIRST_USER_MSG + 302);

///////////////////////////////////////////////////////////


#include <stdlib.h>
#include <limits>

#include "Debug.h"
#include "Data.h"
#include <base.h>
#include <file.h>

#include "HwMaxImageSizeCallback.h"
#include "MarccdCamera.h"
#include "HwBufferCtrlObj.h"


using namespace lima;
using namespace lima::Marccd;
using namespace std;



namespace lima
{
namespace Marccd
{

/*******************************************************************
 * \class Reader
 * \brief object involved reading/watching CBF files generated by Pilatus
 *******************************************************************/

class Reader : public yat::Task
{
    DEB_CLASS_NAMESPC(DebModCamera, "Reader", "Marccd");

 public:

    Reader(Camera& cam, HwBufferCtrlObj& buffer_ctrl);
    ~Reader();

    void start();
    void stop();
    void reset();
    int  getLastAcquiredFrame(void);

  //- [yat::Task implementation]
  protected: 
    virtual void handle_message( yat::Message& msg )    throw (yat::Exception);

 private:

    //- Mutex
    yat::Mutex                  lock_;
    yat::Mutex                  contextual_lock_;
    Camera&                     m_cam;
    HwBufferCtrlObj&            m_buffer;
    int                         m_image_number;
    bool                        m_stop_already_done;
    int                         m_elapsed_seconds_from_stop;
    gdshare::DirectoryWatcher*  m_dw;
    
    //Loading image stuff!
    Size                        m_image_size;
	DI::DiffractionImage*       m_DI;    

};
} // namespace Pilatus
} // namespace lima


#endif // MARCCDREADER_H
